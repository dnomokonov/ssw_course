openapi: 3.0.3
info:
  title: OpenAPI 3.0 ☠️
  description: 'API for managing comments'
  termsOfService: http://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/api/v3
tags:
  - name: comment
    description: Operations about comments
    externalDocs:
      description: Find out more
      url: http://localhost:8080
paths:
  /comment:
    put:
      tags:
        - comment
      summary: Update an existing comment
      description: Update an existing comment by ID
      operationId: updateComment
      requestBody:
        description: Update an existing comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comments'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
        '422':
          description: Validation exception
    post:
      tags:
        - comment
      summary: Add a new comment
      description: Create a new comment
      operationId: addComment
      requestBody:
        description: Create a new comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comments'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /comment/{cmntId}:
    get:
      tags:
        - comment
      summary: Find comment by ID
      description: Returns a single comment
      operationId: getCommentById
      parameters:
        - name: cmntId
          in: path
          description: ID of comment to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
    post:
      tags:
        - comment
      summary: Updates a comment with form data
      description: ''
      operationId: updateCommentWithForm
      parameters:
        - name: cmntId
          in: path
          description: ID of comment that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: text
          in: query
          description: Text of comment that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
    delete:
      tags:
        - comment
      summary: Deletes a comment
      description: Delete a comment by ID
      operationId: deleteComment
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: cmntId
          in: path
          description: Comment ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid comment value
components:
  schemas:
    Comments:
      required:
        - text
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        text:
          type: string
          example: "This is a sample comment"
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Comments:
      description: Comment object that needs to be added or updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comments'
            