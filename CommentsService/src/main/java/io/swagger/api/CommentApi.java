/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Comments;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-03-26T05:32:19.242722438Z[GMT]")
@Validated
public interface CommentApi {

    @Operation(summary = "Add a new comment", description = "Create a new comment", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Comments.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Validation exception") })
    @RequestMapping(value = "/comment",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Comments> addComment(@Parameter(in = ParameterIn.DEFAULT, description = "Create a new comment", required=true, schema=@Schema()) @Valid @RequestBody Comments body
);


    @Operation(summary = "Deletes a comment", description = "Delete a comment by ID", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid comment value") })
    @RequestMapping(value = "/comment/{cmntId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteComment(@Parameter(in = ParameterIn.PATH, description = "Comment ID to delete", required=true, schema=@Schema()) @PathVariable("cmntId") Long cmntId
, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey
) throws NotFoundException;


    @Operation(summary = "Find comment by ID", description = "Returns a single comment", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Comments.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Comment not found") })
    @RequestMapping(value = "/comment/{cmntId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Comments> getCommentById(@Parameter(in = ParameterIn.PATH, description = "ID of comment to return", required=true, schema=@Schema()) @PathVariable("cmntId") Long cmntId
) throws NotFoundException;


    @Operation(summary = "Update an existing comment", description = "Update an existing comment by ID", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Comments.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Comment not found"),
        
        @ApiResponse(responseCode = "422", description = "Validation exception") })
    @RequestMapping(value = "/comment",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Comments> updateComment(@Parameter(in = ParameterIn.DEFAULT, description = "Update an existing comment", required=true, schema=@Schema()) @Valid @RequestBody Comments body
) throws NotFoundException;


    @Operation(summary = "Updates a comment with form data", description = "", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid input") })
    @RequestMapping(value = "/comment/{cmntId}",
        method = RequestMethod.POST)
    ResponseEntity<Void> updateCommentWithForm(@Parameter(in = ParameterIn.PATH, description = "ID of comment that needs to be updated", required=true, schema=@Schema()) @PathVariable("cmntId") Long cmntId
, @Parameter(in = ParameterIn.QUERY, description = "Text of comment that needs to be updated" ,schema=@Schema()) @Valid @RequestParam(value = "text", required = false) String text
) throws NotFoundException;

}

